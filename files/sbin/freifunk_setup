#!/bin/sh

#check system for initial Freifunk configuration

exec >/root/freifunk_setup.log 2>&1
. /sbin/freifunk_shared

echo "(I) Freifunk: start freifunk_setup"


#set empty password for root
(echo ""; sleep 1; echo "") | passwd

#default SSID
ap_ssid=`uci -q get freifunk.@settings[0].default_ap_ssid`

#add batman version to the AdHoc interface SSID
ah_ssid="batman_"`cat /sys/module/batman_adv/version 2> /dev/null`

#default BSSID
ah_bssid=`uci -q get freifunk.@settings[0].default_ah_bssid`

wan_interface=`uci -q get network.wan.ifname`
echo "(I) Freifunk: wan interface: '$wan_interface'"

lan_interface=`uci -q get network.lan.ifname`
echo "(I) Freifunk: lan interface: '$lan_interface'"

wifi_device=`uci -q get wireless.@wifi-iface[0].device`
echo "(I) Freifunk: wifi device: '$wifi_device'"

ff_subnet=`uci get -q freifunk.@settings[0].ff_subnet`


# ------------------------------------------- #
# S E T U P  W I R E L E S S #
# ------------------------------------------- # 

#test if we can span both ad-hoc and access point interfaces, set tx-power to 20dBm (100mW)
if [ -n "$wifi_device" ]; then
	echo "(I) Freifunk: setup /etc/config/wireless"
	uci set wireless.$wifi_device.channel=1
	uci set wireless.$wifi_device.txpower=20

	#wireless is disabled by default
	uci -q delete wireless.@wifi-device[0].disabled

	#remove all wifi interface entries
	clear_wifi_interfaces() {
		while uci -q delete wireless.@wifi-iface[0]; do :; done
	}

	#ad-hoc for batman
	add_ah_interface() {
		local s=wireless.`uci add wireless wifi-iface`
		uci set $s.device="$wifi_device"
		uci set $s.mode=adhoc
		uci set $s.ssid="$ah_ssid"
		uci set $s.bssid="$ah_bssid"
		uci set $s.hidden=1
	}

	#access point for clients
	add_ap_interface() {
		local s=wireless.`uci add wireless wifi-iface`
		uci set $s.device="$wifi_device"
		uci set $s.mode=ap
		uci set $s.network=mesh
		uci set $s.ssid="$ap_ssid"
		uci set $s.encryption="none"
	}

	wifi_restart() {
		echo "(I) Freifunk: wireless down/up"
		wifi
	}

	record_wifi_interfaces() {
		wifi_ap_interface=`uci_query "-P /var/state get wireless.@wifi-iface[?].ssid" "$ap_ssid" "ifname"`
		[ -n "$wifi_ap_interface" -a `ifconfig | grep "$wifi_ap_interface " -c` -eq 0 ] && wifi_ap_interface=""
		wifi_ah_interface=`uci_query "-P /var/state get wireless.@wifi-iface[?].ssid" "$ah_ssid" "ifname"`
		[ -n "$wifi_ah_interface" -a `ifconfig | grep "$wifi_ah_interface " -c` -eq 0 ] && wifi_ah_interface=""
	}

	clear_wifi_interfaces
	add_ah_interface
	add_ap_interface
	wifi_restart
	record_wifi_interfaces

	#if not both interfaces work; try only ad-hoc
	if [ -z "$wifi_ap_interface" -o -z "$wifi_ah_interface" ]; then
		echo "(I) Freifunk: Cannot start ad-hoc and AP mode at the same time - try ad-hoc only now."
		clear_wifi_interfaces
		add_ah_interface
		wifi_restart
		record_wifi_interfaces
	fi

	echo "(I) Freifunk: wifi access point interface: '$wifi_ap_interface'"
	echo "(I) Freifunk: wifi ad-hoc interface: '$wifi_ah_interface'"
fi

#get a unique (but not just random) mac to identify the node
mesh_mac=`cat /sys/class/ieee80211/phy0/macaddress`
[ -z "$mesh_mac" -o "$mesh_mac" = "00:11:22:33:44:55" ] && {
	mesh_mac=$(ifconfig $lan_interface | grep HWaddr | awk '{print $5}')
}
#translate to local administered mac
a=${mesh_mac%%:*} #cut out first hex
a=$((0x$a | 2)) #set second bit to 1
a=`printf '%02x\n' $a` #convert to hex
mesh_mac="$a:${mesh_mac#*:}" #reassemble mac

echo "(I) Freifunk: mac for mesh: '$mesh_mac'"


# ------------------------------------- #
# L A N  S E T U P #
# ------------------------------------- #

echo "(I) Freifunk: Setup LAN interfaces."

uci -q delete network.lan
uci set network.lan="interface"
uci set network.lan.type="bridge"
uci set network.lan.ifname="dummy_lan $lan_interface"
uci set network.lan.ipaddr="192.168.133.1"
uci set network.lan.proto=static
uci set network.lan.netmask="255.255.255.0"

uci -q delete dhcp.lan
uci set dhcp.lan=dhcp
uci set dhcp.lan.interface=lan
uci set dhcp.lan.start=100
uci set dhcp.lan.limit=150
uci set dhcp.lan.leasetime=12h
uci set dhcp.lan.dhcp_option="3" #no gateway yet


# ------------------------------------- #
# M E S H  S E T U P #
# ------------------------------------- # 

echo "(I) Freifunk: Setup MESH interfaces."

uci set network.mesh="interface"
uci set network.mesh.type="bridge"
uci set network.mesh.ifname="dummy_mesh bat0 $wifi_ap_interface"
uci set network.mesh.ipaddr="0.0.0.0"
#uci set network.mesh.macaddr="$mac" #does not work
uci set network.mesh.proto=static
uci set network.mesh.netmask="255.0.0.0"


# set (not so) magic numbers for start ip and address space
# numbers are ip integer representation
start_ip=$((256*256*$ff_subnet+1)) # -> 1900545
end_ip=$((255*255+253)) # -> 65278

#uci add_list dhcp.@dnsmasq[0].interface="br-mesh"
uci -q delete dhcp.@dnsmasq[0].local
uci -q delete dhcp.@dnsmasq[0].domain
#uci set dhcp.@dnsmasq[0].authoritative=0

uci set dhcp.mesh=dhcp
uci set dhcp.mesh.interface=mesh
uci set dhcp.mesh.start=$start_ip
uci set dhcp.mesh.limit=$end_ip
uci set dhcp.mesh.leasetime=2h #max time for address conflicts
uci set dhcp.mesh.dhcp_option="3" #no gateway yet


# ------------------------------------- #
# W A N  S E T U P #
# ------------------------------------- # 

echo "(I) Freifunk: Setup WAN interface."

uci -q delete network.wan
uci set network.wan="interface"
uci set network.wan.ifname="$wan_interface"
uci set network.wan.proto="dhcp"

uci -q delete dhcp.wan
uci set dhcp.wan=dhcp
uci set dhcp.wan.interface=wan
uci set dhcp.wan.ignore=1


# ------------------------------------- #
# B A T M A N  S E T U P #
# ------------------------------------- # 

uci set batman-adv.bat0.interfaces="dummy_bat n2n_mesh tinc_mesh $wifi_ah_interface"


# ------------------------------------- #
# F R E I F U N K  S E T U P #
# ------------------------------------- # 

uci set freifunk.@settings[0].mac="$mesh_mac"
uci set freifunk.@settings[0].default_ah_ssid="$ah_ssid"



/etc/init.d/nodogsplash disable
/etc/init.d/n2n disable
/etc/init.d/tinc disable
/etc/init.d/telnet disable

#write everything to flash
uci commit


echo "(I) Freifunk: done freifunk_setup"
